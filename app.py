import base64
import io
import pandas as pd
from dash import Dash, dcc, html, dash_table
from dash.dependencies import Input, Output, State
import plotly.express as px

app = Dash(__name__)

app.layout = html.Div(
style={
        'maxWidth': '1200px',
        'margin': 'auto',
        'padding': '20px',
        'backgroundColor': '#f9f9f9'    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —á—É—Ç—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä–æ–≥–æ —Ñ–æ–Ω–∞
    },
    children=[
    html.H1("Solar Energy Dashboard", style={'textAlign': 'center'}),
    html.P("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", style={'textAlign': 'center'}),
    dcc.Upload(
        id="upload-data",
        children=html.Button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"),
        multiple=False,
        style={
            'width': '50%',
            'margin': 'auto',
            'padding': '10px',
            'border': '1px dashed #ccc',
            'textAlign': 'center'
        }
    ),
    html.Div(id="output-upload", style={'marginTop': '20px'})
])

@app.callback(
    Output("output-upload", "children"),
    Input("upload-data", "contents"),
    State("upload-data", "filename")
)
def parse_upload(contents, filename):
    if contents is None:
        return html.P("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.", style={'color': 'red'})
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    try:
        df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
    except Exception as e:
        return html.P(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}", style={'color': 'red'})
    return build_dashboard(df)

@app.callback(
    Output("ts-graph", "figure"),
    [Input("period-dropdown", "value"),
     Input("upload-data", "contents")]
)
def update_ts(period, contents):
    if contents is None:
        return {}
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
    df['date'] = pd.to_datetime(df['date'])
    df_resampled = df.set_index('date').resample(period).sum().reset_index()
    fig = px.line(df_resampled, x='date', y='energy_kWh',
                  title="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç¬∑—á)")
    fig.update_layout(transition_duration=500)
    return fig

def build_dashboard(df):
    # df ‚Äî DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: date, energy_kWh, temperature, weather_type –∏ —Ç.–¥.

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: —Ç–∞–±–ª–∏—Ü–∞, –¥—Ä–æ–ø–¥–∞—É–Ω + –≥—Ä–∞—Ñ–∏–∫, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, scatter, pie, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    return html.Div([

        # 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–≤—å—é
        html.P(
            f"‚úÖ –§–∞–π–ª —Å {df.shape[0]} —Å—Ç—Ä–æ–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            style={'color': 'green', 'fontWeight': 'bold'}
        ),
        dash_table.DataTable(
            id="data-table",
            columns=[{"name": i, "id": i} for i in df.columns],
            data=df.head(5).to_dict('records'),
            page_size=5,
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left'}
        ),

        # 2) Dropdown + Time Series –≥—Ä–∞—Ñ–∏–∫
        html.Div([
            html.Label("–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id="period-dropdown",
                options=[
                    {"label": "–î–µ–Ω—å",   "value": "D"},
                    {"label": "–ù–µ–¥–µ–ª—è","value": "W"},
                    {"label": "–ú–µ—Å—è—Ü", "value": "M"},
                ],
                value="D",
                clearable=False,
                style={'width': '200px', 'marginBottom': '10px'}
            ),
            dcc.Graph(id="ts-graph")
        ], style={'marginTop': '30px'}),

        # 3) –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        dcc.Graph(
            id="histogram",
            figure=px.histogram(
                df,
                x="energy_kWh",
                nbins=30,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç¬∑—á)"
            )
        ),

        # 4) Scatter-plot: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ vs —ç–Ω–µ—Ä–≥–∏—è
        dcc.Graph(
            id="scatter",
            figure=px.scatter(
                df,
                x="temperature",
                y="energy_kWh",
                trendline="ols",
                title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ vs –≠–Ω–µ—Ä–≥–∏—è"
            )
        ),

        # 5) Pie-chart –ø–æ —Ç–∏–ø—É –ø–æ–≥–æ–¥—ã
        dcc.Graph(
            id="pie",
            figure=px.pie(
                df,
                names="weather_type",
                values="energy_kWh",
                title="–≠–Ω–µ—Ä–≥–∏—è –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º"
            )
        ),

        # 6) –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–∞–∫—Å–∏–º—É–º —ç–Ω–µ—Ä–≥–∏–∏
        html.Div([
            html.Div([
                html.H4("–°—Ä–µ–¥–Ω–µ–µ (–∫–í—Ç¬∑—á)", style={'textAlign': 'center'}),
                html.P(f"{df['energy_kWh'].mean():.2f}", style={'textAlign': 'center'})
            ], style={'display': 'inline-block', 'width': '45%'}),
            html.Div([
                html.H4("–ú–∞–∫—Å–∏–º—É–º (–∫–í—Ç¬∑—á)", style={'textAlign': 'center'}),
                html.P(f"{df['energy_kWh'].max():.2f}", style={'textAlign': 'center'})
            ], style={'display': 'inline-block', 'width': '45%'})
        ], style={'marginTop': '30px'})

    ], style={'maxWidth': '1000px', 'margin': 'auto', 'padding': '20px'})



if __name__ == "__main__":
    app.run_server(debug=True)
